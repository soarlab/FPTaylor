type token =
  | EOF
  | COLON
  | SEMICOLON
  | COMMA
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | PLUS
  | MINUS
  | MULT
  | DIVIDE
  | POW
  | EQ
  | LE
  | GE
  | LT
  | GT
  | IN
  | PLUS_MINUS
  | ID of (string)
  | NUMBER of (string)
  | SINGLE_NUMERAL of (string)
  | DOUBLE_NUMERAL of (string)
  | CONSTANTS
  | VARIABLES
  | DEFINITIONS
  | CONSTRAINTS
  | EXPRESSIONS
  | INT
  | REAL
  | FLOAT of (int)
  | RND_PAR of (int * string)
  | RND
  | NO_RND
  | E_CONST
  | ABS
  | INV
  | SQRT
  | FMA
  | MIN
  | MAX
  | EXP
  | LOG
  | COS
  | SIN
  | TAN
  | COSH
  | SINH
  | TANH
  | RELU
  | ACOS
  | ASIN
  | ATAN
  | ACOSH
  | ASINH
  | ATANH
  | ATAN2
  | SUB2
  | FLOOR_POWER2

open Parsing;;
let _ = parse_error;;
# 2 "input_parser.mly"
  open Input_parser_env
  open Rounding
  exception TODO
# 72 "input_parser.ml"
let yytransl_const = [|
    0 (* EOF *);
  257 (* COLON *);
  258 (* SEMICOLON *);
  259 (* COMMA *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* PLUS *);
  267 (* MINUS *);
  268 (* MULT *);
  269 (* DIVIDE *);
  270 (* POW *);
  271 (* EQ *);
  272 (* LE *);
  273 (* GE *);
  274 (* LT *);
  275 (* GT *);
  276 (* IN *);
  277 (* PLUS_MINUS *);
  282 (* CONSTANTS *);
  283 (* VARIABLES *);
  284 (* DEFINITIONS *);
  285 (* CONSTRAINTS *);
  286 (* EXPRESSIONS *);
  287 (* INT *);
  288 (* REAL *);
  291 (* RND *);
  292 (* NO_RND *);
  293 (* E_CONST *);
  294 (* ABS *);
  295 (* INV *);
  296 (* SQRT *);
  297 (* FMA *);
  298 (* MIN *);
  299 (* MAX *);
  300 (* EXP *);
  301 (* LOG *);
  302 (* COS *);
  303 (* SIN *);
  304 (* TAN *);
  305 (* COSH *);
  306 (* SINH *);
  307 (* TANH *);
  308 (* RELU *);
  309 (* ACOS *);
  310 (* ASIN *);
  311 (* ATAN *);
  312 (* ACOSH *);
  313 (* ASINH *);
  314 (* ATANH *);
  315 (* ATAN2 *);
  316 (* SUB2 *);
  317 (* FLOOR_POWER2 *);
    0|]

let yytransl_block = [|
  278 (* ID *);
  279 (* NUMBER *);
  280 (* SINGLE_NUMERAL *);
  281 (* DOUBLE_NUMERAL *);
  289 (* FLOAT *);
  290 (* RND_PAR *);
    0|]

let yylhs = "\255\255\
\001\000\001\000\006\000\006\000\005\000\007\000\007\000\008\000\
\008\000\008\000\008\000\008\000\014\000\014\000\009\000\009\000\
\015\000\010\000\010\000\016\000\016\000\017\000\017\000\017\000\
\017\000\011\000\011\000\018\000\018\000\012\000\012\000\019\000\
\019\000\003\000\003\000\003\000\003\000\003\000\003\000\013\000\
\013\000\020\000\020\000\020\000\021\000\021\000\004\000\004\000\
\004\000\004\000\004\000\004\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\002\000\002\000\002\000\002\000\002\000\
\002\000\002\000\002\000\000\000\000\000"

let yylen = "\002\000\
\001\000\004\000\000\000\004\000\001\000\000\000\002\000\002\000\
\002\000\002\000\002\000\002\000\001\000\001\000\000\000\003\000\
\003\000\000\000\003\000\010\000\008\000\000\000\001\000\001\000\
\001\000\000\000\003\000\003\000\004\000\000\000\003\000\003\000\
\004\000\003\000\003\000\003\000\003\000\003\000\003\000\000\000\
\003\000\003\000\004\000\001\000\001\000\002\000\012\000\001\000\
\008\000\006\000\001\000\001\000\001\000\001\000\001\000\001\000\
\004\000\003\000\003\000\003\000\003\000\002\000\002\000\003\000\
\003\000\006\000\003\000\004\000\004\000\008\000\004\000\004\000\
\004\000\004\000\004\000\004\000\006\000\006\000\004\000\004\000\
\004\000\004\000\004\000\004\000\004\000\004\000\004\000\004\000\
\006\000\006\000\004\000\002\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\092\000\001\000\005\000\000\000\000\000\000\000\000\000\
\053\000\054\000\055\000\056\000\051\000\000\000\048\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\008\000\000\000\023\000\024\000\
\025\000\009\000\000\000\000\000\000\000\010\000\000\000\000\000\
\011\000\000\000\000\000\000\000\012\000\000\000\007\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\014\000\013\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\067\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\065\000\000\000\000\000\002\000\000\000\016\000\
\019\000\000\000\000\000\000\000\027\000\000\000\000\000\032\000\
\000\000\031\000\000\000\000\000\041\000\000\000\068\000\069\000\
\071\000\000\000\000\000\000\000\072\000\073\000\074\000\075\000\
\076\000\079\000\080\000\081\000\088\000\082\000\083\000\084\000\
\085\000\086\000\087\000\000\000\000\000\091\000\000\000\057\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\033\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\039\000\000\000\000\000\
\000\000\000\000\000\000\000\000\050\000\000\000\077\000\078\000\
\089\000\090\000\066\000\004\000\000\000\000\000\000\000\000\000\
\000\000\049\000\070\000\000\000\000\000\045\000\000\000\000\000\
\046\000\000\000\000\000\000\000\047\000"

let yydgoto = "\003\000\
\010\000\068\000\168\000\050\000\011\000\158\000\012\000\013\000\
\053\000\058\000\062\000\065\000\069\000\111\000\054\000\059\000\
\060\000\063\000\066\000\070\000\247\000"

let yysindex = "\034\000\
\251\254\144\255\000\000\048\255\238\254\243\254\247\254\015\255\
\202\255\000\000\000\000\000\000\048\255\144\255\144\255\144\255\
\000\000\000\000\000\000\000\000\000\000\003\255\000\000\029\255\
\052\255\055\255\092\255\110\255\128\255\142\255\143\255\207\255\
\004\000\005\000\015\000\020\000\022\000\054\000\055\000\056\000\
\057\000\058\000\059\000\069\000\071\000\072\000\077\000\087\000\
\124\255\089\000\073\255\085\255\000\000\062\255\000\000\000\000\
\000\000\000\000\062\255\138\255\249\254\000\000\062\255\006\255\
\000\000\062\255\253\254\124\255\000\000\062\255\000\000\160\255\
\104\255\104\255\186\255\144\255\144\255\144\255\144\255\144\255\
\144\255\144\255\144\255\144\255\144\255\144\255\144\255\144\255\
\144\255\144\255\144\255\144\255\144\255\144\255\144\255\144\255\
\144\255\144\255\144\255\144\255\144\255\144\255\144\255\144\255\
\011\255\144\255\063\000\144\255\000\000\000\000\238\254\243\254\
\250\255\144\255\003\000\247\254\177\000\088\000\015\255\144\255\
\079\000\202\255\000\000\096\000\104\255\043\000\193\000\234\000\
\076\255\081\255\094\255\036\001\046\001\056\001\066\001\088\001\
\101\001\131\001\146\001\156\001\166\001\176\001\186\001\196\001\
\206\001\216\001\099\255\112\255\226\001\150\255\150\255\104\255\
\104\255\098\000\000\000\236\001\048\255\000\000\124\255\000\000\
\000\000\101\000\124\255\144\255\000\000\177\000\204\255\000\000\
\177\000\000\000\124\255\144\255\000\000\090\000\000\000\000\000\
\000\000\144\255\144\255\144\255\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\144\255\144\255\000\000\094\000\000\000\
\102\000\144\255\124\255\034\255\120\000\144\255\144\255\144\255\
\144\255\144\255\000\000\124\255\007\255\117\255\246\001\000\002\
\010\002\020\002\122\000\063\000\130\255\000\000\124\255\124\255\
\124\255\124\255\124\255\106\000\000\000\144\255\000\000\000\000\
\000\000\000\000\000\000\000\000\144\255\023\255\030\002\221\255\
\250\254\000\000\000\000\109\000\112\000\000\000\140\000\144\255\
\000\000\250\254\124\255\138\000\000\000"

let yyrindex = "\000\000\
\147\001\000\000\000\000\144\000\006\000\001\000\011\000\016\000\
\038\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\053\255\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\148\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\059\255\148\255\000\000\000\000\000\000\000\000\
\067\000\085\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\161\001\000\000\000\000\000\000\006\000\001\000\
\000\000\000\000\000\000\011\000\000\000\000\000\016\000\000\000\
\000\000\038\000\000\000\000\000\103\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\157\000\175\000\121\000\
\139\000\000\000\000\000\000\000\144\000\000\000\174\255\000\000\
\000\000\000\000\227\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\010\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\019\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\161\001\000\000\000\000\078\255\096\255\
\114\255\156\255\205\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\047\000\000\000\000\000\000\000\000\000\
\000\000\000\000\049\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\181\001\145\255\255\255\252\255\199\000\152\001\000\000\
\055\001\057\001\054\001\052\001\062\001\086\000\000\000\000\000\
\000\000\000\000\000\000\000\000\185\000"

let yytablesize = 812
let yytable = "\051\000\
\018\000\006\000\004\000\052\000\245\000\015\000\117\000\114\000\
\075\000\228\000\026\000\120\000\061\000\229\000\154\000\030\000\
\246\000\055\000\056\000\057\000\005\000\006\000\007\000\008\000\
\009\000\241\000\021\000\022\000\023\000\242\000\021\000\022\000\
\023\000\155\000\001\000\002\000\064\000\040\000\123\000\021\000\
\022\000\023\000\076\000\101\000\102\000\103\000\104\000\105\000\
\206\000\207\000\208\000\209\000\210\000\052\000\205\000\077\000\
\052\000\211\000\078\000\115\000\053\000\053\000\118\000\109\000\
\110\000\121\000\063\000\052\000\053\000\053\000\053\000\053\000\
\053\000\005\000\006\000\007\000\008\000\009\000\178\000\034\000\
\034\000\107\000\034\000\179\000\062\000\101\000\102\000\103\000\
\104\000\105\000\101\000\102\000\103\000\104\000\105\000\079\000\
\180\000\035\000\035\000\108\000\035\000\196\000\064\000\101\000\
\102\000\103\000\104\000\105\000\101\000\102\000\103\000\104\000\
\105\000\080\000\197\000\037\000\037\000\105\000\037\000\230\000\
\060\000\101\000\102\000\103\000\104\000\105\000\101\000\102\000\
\103\000\104\000\105\000\081\000\237\000\101\000\102\000\103\000\
\104\000\105\000\061\000\101\000\102\000\103\000\104\000\105\000\
\112\000\082\000\083\000\014\000\116\000\044\000\044\000\119\000\
\201\000\015\000\016\000\122\000\058\000\036\000\036\000\113\000\
\036\000\103\000\104\000\105\000\123\000\017\000\018\000\019\000\
\020\000\101\000\102\000\103\000\104\000\105\000\059\000\017\000\
\017\000\021\000\022\000\023\000\024\000\025\000\026\000\027\000\
\028\000\029\000\030\000\031\000\032\000\033\000\034\000\035\000\
\036\000\037\000\038\000\039\000\040\000\041\000\042\000\043\000\
\044\000\045\000\046\000\047\000\048\000\014\000\038\000\038\000\
\124\000\038\000\084\000\015\000\016\000\101\000\102\000\103\000\
\104\000\105\000\206\000\207\000\208\000\209\000\210\000\067\000\
\018\000\019\000\020\000\244\000\028\000\028\000\101\000\102\000\
\103\000\104\000\105\000\021\000\022\000\023\000\024\000\025\000\
\026\000\027\000\028\000\029\000\030\000\031\000\032\000\033\000\
\034\000\035\000\036\000\037\000\038\000\039\000\040\000\041\000\
\042\000\043\000\044\000\045\000\046\000\047\000\048\000\085\000\
\086\000\018\000\006\000\042\000\042\000\162\000\015\000\029\000\
\029\000\164\000\087\000\026\000\043\000\043\000\022\000\088\000\
\030\000\089\000\018\000\018\000\018\000\018\000\018\000\015\000\
\015\000\015\000\015\000\015\000\026\000\026\000\026\000\026\000\
\026\000\030\000\030\000\030\000\030\000\030\000\040\000\175\000\
\021\000\021\000\020\000\020\000\101\000\102\000\103\000\104\000\
\105\000\090\000\091\000\092\000\093\000\094\000\095\000\040\000\
\040\000\040\000\040\000\040\000\063\000\063\000\157\000\063\000\
\096\000\063\000\097\000\098\000\063\000\063\000\063\000\063\000\
\099\000\063\000\063\000\063\000\063\000\063\000\062\000\062\000\
\169\000\062\000\100\000\062\000\106\000\172\000\062\000\062\000\
\062\000\062\000\174\000\062\000\062\000\062\000\062\000\062\000\
\064\000\064\000\202\000\064\000\199\000\064\000\220\000\213\000\
\064\000\064\000\064\000\064\000\219\000\064\000\064\000\064\000\
\064\000\064\000\060\000\060\000\222\000\060\000\235\000\060\000\
\238\000\248\000\060\000\060\000\060\000\060\000\249\000\060\000\
\060\000\060\000\060\000\060\000\061\000\061\000\250\000\061\000\
\253\000\061\000\006\000\093\000\061\000\061\000\061\000\061\000\
\006\000\061\000\061\000\061\000\061\000\061\000\058\000\058\000\
\003\000\058\000\236\000\058\000\071\000\160\000\058\000\058\000\
\161\000\165\000\170\000\058\000\058\000\058\000\058\000\058\000\
\059\000\059\000\252\000\059\000\166\000\059\000\049\000\173\000\
\059\000\059\000\015\000\016\000\000\000\059\000\059\000\059\000\
\059\000\059\000\072\000\073\000\074\000\176\000\017\000\018\000\
\019\000\020\000\101\000\102\000\103\000\104\000\105\000\000\000\
\000\000\000\000\021\000\022\000\023\000\024\000\025\000\026\000\
\027\000\028\000\029\000\030\000\031\000\032\000\033\000\034\000\
\035\000\036\000\037\000\038\000\039\000\040\000\041\000\042\000\
\043\000\044\000\045\000\046\000\047\000\048\000\177\000\000\000\
\000\000\000\000\000\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\125\000\126\000\127\000\128\000\129\000\130\000\131\000\132\000\
\133\000\134\000\135\000\136\000\137\000\138\000\139\000\140\000\
\141\000\142\000\143\000\144\000\145\000\146\000\147\000\148\000\
\149\000\150\000\151\000\152\000\153\000\000\000\156\000\000\000\
\159\000\000\000\000\000\000\000\000\000\000\000\163\000\000\000\
\181\000\167\000\000\000\000\000\171\000\101\000\102\000\103\000\
\104\000\105\000\182\000\000\000\000\000\000\000\000\000\101\000\
\102\000\103\000\104\000\105\000\183\000\000\000\000\000\000\000\
\000\000\101\000\102\000\103\000\104\000\105\000\184\000\000\000\
\000\000\000\000\000\000\101\000\102\000\103\000\104\000\105\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\203\000\000\000\204\000\000\000\185\000\167\000\000\000\000\000\
\212\000\101\000\102\000\103\000\104\000\105\000\214\000\215\000\
\216\000\186\000\000\000\000\000\000\000\000\000\101\000\102\000\
\103\000\104\000\105\000\000\000\000\000\000\000\000\000\000\000\
\217\000\218\000\000\000\000\000\000\000\000\000\221\000\000\000\
\000\000\000\000\223\000\224\000\225\000\226\000\227\000\187\000\
\000\000\000\000\000\000\000\000\101\000\102\000\103\000\104\000\
\105\000\000\000\000\000\000\000\000\000\000\000\188\000\000\000\
\000\000\000\000\239\000\101\000\102\000\103\000\104\000\105\000\
\189\000\240\000\000\000\000\000\000\000\101\000\102\000\103\000\
\104\000\105\000\190\000\000\000\251\000\000\000\000\000\101\000\
\102\000\103\000\104\000\105\000\191\000\000\000\000\000\000\000\
\000\000\101\000\102\000\103\000\104\000\105\000\192\000\000\000\
\000\000\000\000\000\000\101\000\102\000\103\000\104\000\105\000\
\193\000\000\000\000\000\000\000\000\000\101\000\102\000\103\000\
\104\000\105\000\194\000\000\000\000\000\000\000\000\000\101\000\
\102\000\103\000\104\000\105\000\195\000\000\000\000\000\000\000\
\000\000\101\000\102\000\103\000\104\000\105\000\198\000\000\000\
\000\000\000\000\000\000\101\000\102\000\103\000\104\000\105\000\
\200\000\000\000\000\000\000\000\000\000\101\000\102\000\103\000\
\104\000\105\000\231\000\000\000\000\000\000\000\000\000\101\000\
\102\000\103\000\104\000\105\000\232\000\000\000\000\000\000\000\
\000\000\101\000\102\000\103\000\104\000\105\000\233\000\000\000\
\000\000\000\000\000\000\101\000\102\000\103\000\104\000\105\000\
\234\000\000\000\000\000\000\000\000\000\101\000\102\000\103\000\
\104\000\105\000\243\000\000\000\000\000\000\000\000\000\101\000\
\102\000\103\000\104\000\105\000"

let yycheck = "\004\000\
\000\000\000\000\008\001\022\001\011\001\000\000\001\001\015\001\
\006\001\003\001\000\000\015\001\022\001\007\001\004\001\000\000\
\023\001\031\001\032\001\033\001\026\001\027\001\028\001\029\001\
\030\001\003\001\034\001\035\001\036\001\007\001\034\001\035\001\
\036\001\023\001\001\000\002\000\022\001\000\000\005\001\034\001\
\035\001\036\001\014\001\010\001\011\001\012\001\013\001\014\001\
\015\001\016\001\017\001\018\001\019\001\001\001\166\000\004\001\
\004\001\169\000\004\001\061\000\002\001\003\001\064\000\002\001\
\003\001\067\000\000\000\015\001\010\001\011\001\012\001\013\001\
\014\001\026\001\027\001\028\001\029\001\030\001\003\001\002\001\
\003\001\009\001\005\001\003\001\000\000\010\001\011\001\012\001\
\013\001\014\001\010\001\011\001\012\001\013\001\014\001\004\001\
\003\001\002\001\003\001\015\001\005\001\003\001\000\000\010\001\
\011\001\012\001\013\001\014\001\010\001\011\001\012\001\013\001\
\014\001\004\001\003\001\002\001\003\001\014\001\005\001\003\001\
\000\000\010\001\011\001\012\001\013\001\014\001\010\001\011\001\
\012\001\013\001\014\001\004\001\003\001\010\001\011\001\012\001\
\013\001\014\001\000\000\010\001\011\001\012\001\013\001\014\001\
\059\000\004\001\004\001\004\001\063\000\002\001\003\001\066\000\
\157\000\010\001\011\001\070\000\000\000\002\001\003\001\022\001\
\005\001\012\001\013\001\014\001\005\001\022\001\023\001\024\001\
\025\001\010\001\011\001\012\001\013\001\014\001\000\000\002\001\
\003\001\034\001\035\001\036\001\037\001\038\001\039\001\040\001\
\041\001\042\001\043\001\044\001\045\001\046\001\047\001\048\001\
\049\001\050\001\051\001\052\001\053\001\054\001\055\001\056\001\
\057\001\058\001\059\001\060\001\061\001\004\001\002\001\003\001\
\023\001\005\001\004\001\010\001\011\001\010\001\011\001\012\001\
\013\001\014\001\015\001\016\001\017\001\018\001\019\001\022\001\
\023\001\024\001\025\001\007\001\002\001\003\001\010\001\011\001\
\012\001\013\001\014\001\034\001\035\001\036\001\037\001\038\001\
\039\001\040\001\041\001\042\001\043\001\044\001\045\001\046\001\
\047\001\048\001\049\001\050\001\051\001\052\001\053\001\054\001\
\055\001\056\001\057\001\058\001\059\001\060\001\061\001\004\001\
\004\001\009\001\009\001\002\001\003\001\020\001\009\001\002\001\
\003\001\015\001\004\001\009\001\002\001\003\001\022\001\004\001\
\009\001\004\001\026\001\027\001\028\001\029\001\030\001\026\001\
\027\001\028\001\029\001\030\001\026\001\027\001\028\001\029\001\
\030\001\026\001\027\001\028\001\029\001\030\001\009\001\005\001\
\002\001\003\001\002\001\003\001\010\001\011\001\012\001\013\001\
\014\001\004\001\004\001\004\001\004\001\004\001\004\001\026\001\
\027\001\028\001\029\001\030\001\002\001\003\001\008\001\005\001\
\004\001\007\001\004\001\004\001\010\001\011\001\012\001\013\001\
\004\001\015\001\016\001\017\001\018\001\019\001\002\001\003\001\
\001\001\005\001\004\001\007\001\004\001\015\001\010\001\011\001\
\012\001\013\001\003\001\015\001\016\001\017\001\018\001\019\001\
\002\001\003\001\006\001\005\001\011\001\007\001\009\001\022\001\
\010\001\011\001\012\001\013\001\023\001\015\001\016\001\017\001\
\018\001\019\001\002\001\003\001\005\001\005\001\005\001\007\001\
\023\001\021\001\010\001\011\001\012\001\013\001\023\001\015\001\
\016\001\017\001\018\001\019\001\002\001\003\001\003\001\005\001\
\007\001\007\001\000\000\000\000\010\001\011\001\012\001\013\001\
\009\001\015\001\016\001\017\001\018\001\019\001\002\001\003\001\
\000\000\005\001\220\000\007\001\013\000\111\000\010\001\011\001\
\112\000\116\000\119\000\015\001\016\001\017\001\018\001\019\001\
\002\001\003\001\250\000\005\001\004\001\007\001\002\000\122\000\
\010\001\011\001\010\001\011\001\255\255\015\001\016\001\017\001\
\018\001\019\001\014\000\015\000\016\000\005\001\022\001\023\001\
\024\001\025\001\010\001\011\001\012\001\013\001\014\001\255\255\
\255\255\255\255\034\001\035\001\036\001\037\001\038\001\039\001\
\040\001\041\001\042\001\043\001\044\001\045\001\046\001\047\001\
\048\001\049\001\050\001\051\001\052\001\053\001\054\001\055\001\
\056\001\057\001\058\001\059\001\060\001\061\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\076\000\077\000\078\000\079\000\080\000\081\000\082\000\083\000\
\084\000\085\000\086\000\087\000\088\000\089\000\090\000\091\000\
\092\000\093\000\094\000\095\000\096\000\097\000\098\000\099\000\
\100\000\101\000\102\000\103\000\104\000\255\255\106\000\255\255\
\108\000\255\255\255\255\255\255\255\255\255\255\114\000\255\255\
\005\001\117\000\255\255\255\255\120\000\010\001\011\001\012\001\
\013\001\014\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\164\000\255\255\166\000\255\255\005\001\169\000\255\255\255\255\
\172\000\010\001\011\001\012\001\013\001\014\001\178\000\179\000\
\180\000\005\001\255\255\255\255\255\255\255\255\010\001\011\001\
\012\001\013\001\014\001\255\255\255\255\255\255\255\255\255\255\
\196\000\197\000\255\255\255\255\255\255\255\255\202\000\255\255\
\255\255\255\255\206\000\207\000\208\000\209\000\210\000\005\001\
\255\255\255\255\255\255\255\255\010\001\011\001\012\001\013\001\
\014\001\255\255\255\255\255\255\255\255\255\255\005\001\255\255\
\255\255\255\255\230\000\010\001\011\001\012\001\013\001\014\001\
\005\001\237\000\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\005\001\255\255\248\000\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001\005\001\255\255\255\255\255\255\
\255\255\010\001\011\001\012\001\013\001\014\001\005\001\255\255\
\255\255\255\255\255\255\010\001\011\001\012\001\013\001\014\001\
\005\001\255\255\255\255\255\255\255\255\010\001\011\001\012\001\
\013\001\014\001\005\001\255\255\255\255\255\255\255\255\010\001\
\011\001\012\001\013\001\014\001"

let yynames_const = "\
  EOF\000\
  COLON\000\
  SEMICOLON\000\
  COMMA\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  PLUS\000\
  MINUS\000\
  MULT\000\
  DIVIDE\000\
  POW\000\
  EQ\000\
  LE\000\
  GE\000\
  LT\000\
  GT\000\
  IN\000\
  PLUS_MINUS\000\
  CONSTANTS\000\
  VARIABLES\000\
  DEFINITIONS\000\
  CONSTRAINTS\000\
  EXPRESSIONS\000\
  INT\000\
  REAL\000\
  RND\000\
  NO_RND\000\
  E_CONST\000\
  ABS\000\
  INV\000\
  SQRT\000\
  FMA\000\
  MIN\000\
  MAX\000\
  EXP\000\
  LOG\000\
  COS\000\
  SIN\000\
  TAN\000\
  COSH\000\
  SINH\000\
  TANH\000\
  RELU\000\
  ACOS\000\
  ASIN\000\
  ATAN\000\
  ACOSH\000\
  ASINH\000\
  ATANH\000\
  ATAN2\000\
  SUB2\000\
  FLOOR_POWER2\000\
  "

let yynames_block = "\
  ID\000\
  NUMBER\000\
  SINGLE_NUMERAL\000\
  DOUBLE_NUMERAL\000\
  FLOAT\000\
  RND_PAR\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'task) in
    Obj.repr(
# 48 "input_parser.mly"
         ( _1 )
# 565 "input_parser.ml"
               : Task.task list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'task) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'more_tasks) in
    Obj.repr(
# 49 "input_parser.mly"
                                  ( _2 @ _4 )
# 573 "input_parser.ml"
               : Task.task list))
; (fun __caml_parser_env ->
    Obj.repr(
# 53 "input_parser.mly"
    ( [] )
# 579 "input_parser.ml"
               : 'more_tasks))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 2 : 'task) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : 'more_tasks) in
    Obj.repr(
# 54 "input_parser.mly"
                                  ( _2 @ _4 )
# 587 "input_parser.ml"
               : 'more_tasks))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'section_list) in
    Obj.repr(
# 58 "input_parser.mly"
                 ( 
    let tasks = env_to_tasks () in
    reset();
    tasks
  )
# 598 "input_parser.ml"
               : 'task))
; (fun __caml_parser_env ->
    Obj.repr(
# 66 "input_parser.mly"
    ()
# 604 "input_parser.ml"
               : 'section_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'section) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'section_list) in
    Obj.repr(
# 67 "input_parser.mly"
                         ()
# 612 "input_parser.ml"
               : 'section_list))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constants_list) in
    Obj.repr(
# 71 "input_parser.mly"
                             ()
# 619 "input_parser.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'variables_list) in
    Obj.repr(
# 72 "input_parser.mly"
                             ()
# 626 "input_parser.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'definitions_list) in
    Obj.repr(
# 73 "input_parser.mly"
                                 ()
# 633 "input_parser.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'constraints_list) in
    Obj.repr(
# 74 "input_parser.mly"
                                 ()
# 640 "input_parser.ml"
               : 'section))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'expressions_list) in
    Obj.repr(
# 75 "input_parser.mly"
                                 ()
# 647 "input_parser.ml"
               : 'section))
; (fun __caml_parser_env ->
    Obj.repr(
# 79 "input_parser.mly"
          ()
# 653 "input_parser.ml"
               : 'separator))
; (fun __caml_parser_env ->
    Obj.repr(
# 80 "input_parser.mly"
              ()
# 659 "input_parser.ml"
               : 'separator))
; (fun __caml_parser_env ->
    Obj.repr(
# 84 "input_parser.mly"
    ()
# 665 "input_parser.ml"
               : 'constants_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constant) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'separator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constants_list) in
    Obj.repr(
# 85 "input_parser.mly"
                                      ()
# 674 "input_parser.ml"
               : 'constants_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 89 "input_parser.mly"
             ( add_constant _1 _3 )
# 682 "input_parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    Obj.repr(
# 93 "input_parser.mly"
    ()
# 688 "input_parser.ml"
               : 'variables_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'variable) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'separator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'variables_list) in
    Obj.repr(
# 94 "input_parser.mly"
                                      ()
# 697 "input_parser.ml"
               : 'variables_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 9 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 5 : Input_parser_env.raw_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 99 "input_parser.mly"
    ( add_variable_with_uncertainty _1 _2 _5 _7 _10 )
# 708 "input_parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 7 : 'var_type) in
    let _2 = (Parsing.peek_val __caml_parser_env 6 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 101 "input_parser.mly"
    ( add_variable _1 _2 _5 _7 )
# 718 "input_parser.ml"
               : 'variable))
; (fun __caml_parser_env ->
    Obj.repr(
# 105 "input_parser.mly"
    ( string_to_value_type (Config.get_string_option "default-var-type") )
# 724 "input_parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "input_parser.mly"
        ( real_type )
# 730 "input_parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 107 "input_parser.mly"
         ( real_type )
# 736 "input_parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 108 "input_parser.mly"
          ( mk_value_type _1 )
# 743 "input_parser.ml"
               : 'var_type))
; (fun __caml_parser_env ->
    Obj.repr(
# 112 "input_parser.mly"
    ()
# 749 "input_parser.ml"
               : 'definitions_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'definition) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'separator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'definitions_list) in
    Obj.repr(
# 113 "input_parser.mly"
                                          ()
# 758 "input_parser.ml"
               : 'definitions_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 117 "input_parser.mly"
               ( add_definition _1 _3 )
# 766 "input_parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Rounding.rnd_info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 118 "input_parser.mly"
                   ( add_definition _1 (apply_raw_rounding _2 _4) )
# 775 "input_parser.ml"
               : 'definition))
; (fun __caml_parser_env ->
    Obj.repr(
# 122 "input_parser.mly"
    ()
# 781 "input_parser.ml"
               : 'constraints_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'constr) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'separator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'constraints_list) in
    Obj.repr(
# 123 "input_parser.mly"
                                      ()
# 790 "input_parser.ml"
               : 'constraints_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_formula) in
    Obj.repr(
# 127 "input_parser.mly"
                        ( add_constraint _1 _3 )
# 798 "input_parser.ml"
               : 'constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Rounding.rnd_info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_formula) in
    Obj.repr(
# 128 "input_parser.mly"
                            ( add_constraint _1 (apply_raw_rounding_to_formula _2 _4) )
# 807 "input_parser.ml"
               : 'constr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 132 "input_parser.mly"
                 ( Raw_eq (_1, _3) )
# 815 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 133 "input_parser.mly"
                 ( Raw_le (_1, _3) )
# 823 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 134 "input_parser.mly"
                 ( Raw_lt (_1, _3) )
# 831 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 135 "input_parser.mly"
                 ( Raw_le (_3, _1) )
# 839 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 136 "input_parser.mly"
                 ( Raw_lt (_3, _1) )
# 847 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_formula) in
    Obj.repr(
# 137 "input_parser.mly"
                             ( _2 )
# 854 "input_parser.ml"
               : Input_parser_env.raw_formula))
; (fun __caml_parser_env ->
    Obj.repr(
# 141 "input_parser.mly"
    ()
# 860 "input_parser.ml"
               : 'expressions_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expression) in
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'separator) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expressions_list) in
    Obj.repr(
# 142 "input_parser.mly"
                                          ()
# 869 "input_parser.ml"
               : 'expressions_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 146 "input_parser.mly"
               ( add_expression_with_name _1 _3 )
# 877 "input_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _2 = (Parsing.peek_val __caml_parser_env 2 : Rounding.rnd_info) in
    let _4 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 147 "input_parser.mly"
                   ( add_expression_with_name _1 (apply_raw_rounding _2 _4) )
# 886 "input_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 148 "input_parser.mly"
         ( add_expression _1 )
# 893 "input_parser.ml"
               : 'expression))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 152 "input_parser.mly"
           ( _1 )
# 900 "input_parser.ml"
               : 'pos_neg_number))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 153 "input_parser.mly"
                 ( ("-" ^ _2) )
# 907 "input_parser.ml"
               : 'pos_neg_number))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 9 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 7 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _9 = (Parsing.peek_val __caml_parser_env 3 : 'pos_neg_number) in
    let _11 = (Parsing.peek_val __caml_parser_env 1 : 'pos_neg_number) in
    Obj.repr(
# 158 "input_parser.mly"
    ( create_explicit_rounding (int_of_string _3) (_5) 
        (float_of_string _7) (int_of_string _9) (int_of_string _11) )
# 919 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    Obj.repr(
# 160 "input_parser.mly"
           ( create_rounding 0 "ne" 1.0 )
# 925 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 162 "input_parser.mly"
    ( create_rounding (int_of_string _3) (_5) (float_of_string _7) )
# 934 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 164 "input_parser.mly"
    ( create_rounding (int_of_string _3) (_5) 1.0 )
# 942 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int * string) in
    Obj.repr(
# 166 "input_parser.mly"
    ( create_rounding (fst _1) (snd _1) 1.0 )
# 949 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    Obj.repr(
# 168 "input_parser.mly"
    ( string_to_rounding (Config.get_string_option "default-rnd") )
# 955 "input_parser.ml"
               : Rounding.rnd_info))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 172 "input_parser.mly"
       ( Identifier _1 )
# 962 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 173 "input_parser.mly"
           ( Numeral (More_num.num_of_float_string _1) )
# 969 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 175 "input_parser.mly"
    ( Raw_rounding (string_to_rounding "rnd32", Numeral (More_num.num_of_float_string _1)) )
# 976 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 177 "input_parser.mly"
    ( Raw_rounding (string_to_rounding "rnd64", Numeral (More_num.num_of_float_string _1)) )
# 983 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : Rounding.rnd_info) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 178 "input_parser.mly"
                           ( Raw_rounding (_1, _3) )
# 991 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 179 "input_parser.mly"
                   ( Raw_bin_op ("+", _1, _3) )
# 999 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 180 "input_parser.mly"
                    ( Raw_bin_op ("-", _1, _3) )
# 1007 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 181 "input_parser.mly"
                   ( Raw_bin_op ("*", _1, _3) )
# 1015 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 182 "input_parser.mly"
                     ( Raw_bin_op ("/", _1, _3) )
# 1023 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 183 "input_parser.mly"
                         ( Raw_u_op ("-", _2) )
# 1030 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 184 "input_parser.mly"
                        ( _2 )
# 1037 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 0 : Input_parser_env.raw_expr) in
    Obj.repr(
# 185 "input_parser.mly"
                     ( Raw_u_op ("exp", _3) )
# 1044 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : Input_parser_env.raw_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 186 "input_parser.mly"
                    ( Raw_bin_op ("^", _1, Numeral (Num.num_of_string _3)) )
# 1052 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 5 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : string) in
    Obj.repr(
# 188 "input_parser.mly"
    ( Raw_bin_op ("^", _1, Numeral (Num.minus_num (Num.num_of_string _5))) )
# 1060 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 189 "input_parser.mly"
                       ( _2 )
# 1067 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 190 "input_parser.mly"
                           ( Raw_u_op ("abs", _3) )
# 1074 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 191 "input_parser.mly"
                           ( Raw_u_op ("inv", _3) )
# 1081 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 5 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _7 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 193 "input_parser.mly"
    ( Raw_gen_op ("fma", [_3; _5; _7]) )
# 1090 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 194 "input_parser.mly"
                            ( Raw_u_op ("sqrt", _3) )
# 1097 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 195 "input_parser.mly"
                           ( Raw_u_op ("exp", _3) )
# 1104 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 196 "input_parser.mly"
                           ( Raw_u_op ("log", _3) )
# 1111 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 197 "input_parser.mly"
                           ( Raw_u_op ("cos", _3) )
# 1118 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 198 "input_parser.mly"
                           ( Raw_u_op ("sin", _3) )
# 1125 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 199 "input_parser.mly"
                           ( Raw_u_op ("tan", _3) )
# 1132 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 200 "input_parser.mly"
                                      ( Raw_bin_op ("min", _3, _5) )
# 1140 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 201 "input_parser.mly"
                                      ( Raw_bin_op ("max", _3, _5) )
# 1148 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 202 "input_parser.mly"
                            ( Raw_u_op ("cosh", _3) )
# 1155 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 203 "input_parser.mly"
                            ( Raw_u_op ("sinh", _3) )
# 1162 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 204 "input_parser.mly"
                            ( Raw_u_op ("tanh", _3) )
# 1169 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 205 "input_parser.mly"
                            ( Raw_u_op ("acos", _3) )
# 1176 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 206 "input_parser.mly"
                            ( Raw_u_op ("asin", _3) )
# 1183 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 207 "input_parser.mly"
                            ( Raw_u_op ("atan", _3) )
# 1190 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 208 "input_parser.mly"
                             ( Raw_u_op ("acosh", _3) )
# 1197 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 209 "input_parser.mly"
                             ( Raw_u_op ("asinh", _3) )
# 1204 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 210 "input_parser.mly"
                             ( Raw_u_op ("atanh", _3) )
# 1211 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 211 "input_parser.mly"
                            ( Raw_u_op ("relu", _3) )
# 1218 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 212 "input_parser.mly"
                                        ( raise TODO )
# 1226 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 3 : Input_parser_env.raw_expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 213 "input_parser.mly"
                                       ( Raw_bin_op ("sub2", _3, _5) )
# 1234 "input_parser.ml"
               : Input_parser_env.raw_expr))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 1 : Input_parser_env.raw_expr) in
    Obj.repr(
# 214 "input_parser.mly"
                                    ( Raw_u_op ("floor_power2", _3) )
# 1241 "input_parser.ml"
               : Input_parser_env.raw_expr))
(* Entry tasks *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
(* Entry expr *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let tasks (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : Task.task list)
let expr (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 2 lexfun lexbuf : Input_parser_env.raw_expr)
;;
